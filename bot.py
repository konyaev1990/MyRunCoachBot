import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from hypercorn.asyncio import serve
from hypercorn.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TOKEN')
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
QUESTIONS = [
    {"text": "–ö–æ–≥–¥–∞ –í–∞—à —Å—Ç–∞—Ä—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.06.2025)", "type": "input"},
    {"text": "–ö–∞–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è?", "options": ["800‚Äì3000 –º", "3‚Äì10 –∫–º", "21 –∫–º", "42 –∫–º"]},
    {"text": "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?", "options": ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–û–ø—ã—Ç–Ω—ã–π"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –±–µ–≥–∞—Ç—å?", "options": ["1", "3", "5", "7"]},
    {"text": "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?", "options": ["–ü–∞—Ä–∫", "–°—Ç–∞–¥–∏–æ–Ω", "–õ–µ—Å"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", "options": ["45 –º–∏–Ω", "45‚Äì60 –º–∏–Ω", "60‚Äì90 –º–∏–Ω"]},
    {"text": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã?", "options": ["–ö–æ–ª–µ–Ω–∏", "–ù–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü–∞", "–î—Ä—É–≥–æ–µ"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–±–µ–≥–∞–ª–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", "type": "input"},
    {"text": "–ö–∞–∫–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –±–µ–≥–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?", "type": "multi_input", "options": ["–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"]}
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['current_question'] = 0
    await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get('current_question', 0)
    
    if index >= len(QUESTIONS):
        await generate_program(update, context)
        return
    
    question = QUESTIONS[index]
    
    if 'options' in question:
        keyboard = [[KeyboardButton(option)] for option in question['options']]
        await update.message.reply_text(
            question['text'],
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(question['text'], reply_markup=ReplyKeyboardRemove())

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get('current_question', 0)
    question = QUESTIONS[index]
    answer = update.message.text

    if 'answers' not in context.user_data:
        context.user_data['answers'] = {}
    
    context.user_data['answers'][question['text']] = answer

    if question['text'] == "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã?" and answer == "–î—Ä—É–≥–æ–µ":
        context.user_data['awaiting_custom_input'] = True
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        return

    if context.user_data.get('awaiting_custom_input'):
        context.user_data['answers']['–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞–≤–º–µ'] = answer
        context.user_data['awaiting_custom_input'] = False

    context.user_data['current_question'] += 1
    await ask_question(update, context)

async def generate_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data['answers']
    result = "üèÅ –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
    for key, value in data.items():
        result += f"{key}: {value}\n"

    result += "\nüìÖ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–¥–µ–ª–∏:\n"
    dist = data.get("–ö–∞–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è?")
    if dist == "42 –∫–º":
        result += "- –¢–µ–º–ø–æ–≤—ã–π –±–µ–≥\n- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã\n- –î–æ–ª–≥–∏–π –±–µ–≥\n- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    elif dist == "21 –∫–º":
        result += "- –ë–µ–≥ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n- –ö–∞—Ä–¥–∏–æ\n- –†–∞—Å—Ç—è–∂–∫–∞"
    else:
        result += "- –ë–µ–≥ 3‚Äì5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n- –°–∏–ª–æ–≤—ã–µ\n- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã"

    await update.message.reply_text(result, reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –£–¥–∞—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö! üí™")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post(f'/{TOKEN}')
async def telegram_webhook():
    try:
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        await application.update_queue.put(update)
        return '', 200
    except Exception as e:
        logger.error(f"Webhook error: {e}\nRequest data: {request.data}")
        return '', 500

@app.get('/')
def health_check():
    return 'Bot is running!', 200

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def initialize():
    await application.initialize()
    await application.bot.set_webhook(WEBHOOK_URL)
    await application.start()

async def run_server():
    await initialize()
    config = Config()
    config.bind = [f"0.0.0.0:{os.getenv('PORT', 5000)}"]
    await serve(app, config)

if __name__ == '__main__':
    try:
        asyncio.run(run_server())
    except Exception as e:
        logger.critical(f"Application failed: {e}")
        raise
