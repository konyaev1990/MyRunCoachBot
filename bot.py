import logging
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from dotenv import load_dotenv
import google.generativeai as genai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
QUESTIONS = [
    {
        "text": "–ö–æ–≥–¥–∞ –í–∞—à —Å—Ç–∞—Ä—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä 20.06.2025)",
        "type": "input"
    },
    {
        "text": "–ö–∞–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è?",
        "options": ["800‚Äì3000 –º", "3‚Äì10 –∫–º", "21 –∫–º", "42 –∫–º"]
    },
    {
        "text": "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
        "options": ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–û–ø—ã—Ç–Ω—ã–π"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –±–µ–≥–∞—Ç—å?",
        "options": ["1", "3", "5", "7"]
    },
    {
        "text": "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
        "options": ["–õ–µ—Å", "–ü–∞—Ä–∫", "–°—Ç–∞–¥–∏–æ–Ω", "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        "options": ["–¥–æ 45 –º–∏–Ω", "45‚Äì60 –º–∏–Ω", "60‚Äì90 –º–∏–Ω"]
    },
    {
        "text": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã?",
        "options": ["–ë–æ–ª—è—Ç –∫–æ–ª–µ–Ω–∏", "–ë–æ–ª–∏—Ç –Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü–∞", "–î—Ä—É–≥–æ–µ"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–±–µ–≥–∞–ª–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        "type": "input"
    },
    {
        "text": "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–∞–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ? (–≤–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª')",
        "type": "multi_input",
        "options": ["–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"]
    }
]

QUESTION, CLARIFICATION = range(2)
user_data = {}

def generate_prompt(answers):
    parts = [f"{q['text']} {answers.get(q['text'], '')}" for q in QUESTIONS]
    return """–°–æ—Å—Ç–∞–≤—å –±–µ–≥–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
""" + "\n".join(parts) + """
"""

def generate_training_program(answers):
    prompt = generate_prompt(answers)
    model = genai.GenerativeModel("gemini-pro")
    response = model.generate_content(prompt)
    return response.text if hasattr(response, "text") else str(response)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {}
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.",
        reply_markup=ReplyKeyboardRemove()
    )
    await ask_question(update, context)
    return QUESTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_index = context.user_data.get("current_index", -1) + 1
    if current_index >= len(QUESTIONS):
        return await finish_questionnaire(update, context)

    question = QUESTIONS[current_index]
    context.user_data["current_index"] = current_index
    context.user_data["current_question"] = question
    reply_markup = None
    if "options" in question:
        buttons = [[KeyboardButton(option)] for option in question["options"]]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(question["text"], reply_markup=reply_markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text
    current_question = context.user_data["current_question"]

    if context.user_data.get("awaiting_clarification"):
        user_data[user_id][current_question["text"]] = f"–î—Ä—É–≥–æ–µ: {answer}"
        context.user_data["awaiting_clarification"] = False
        await ask_question(update, context)
        return QUESTION

    if "options" in current_question and answer not in current_question["options"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return QUESTION

    if answer == "–î—Ä—É–≥–æ–µ" and "options" in current_question:
        context.user_data["awaiting_clarification"] = True
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:")
        return CLARIFICATION

    user_data[user_id][current_question["text"]] = answer
    await ask_question(update, context)
    return QUESTION

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    program = generate_training_program(user_data[user_id])
    await update.message.reply_text(
        program,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™\n–î–ª—è –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    await update.message.reply_text(
        "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            CLARIFICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
