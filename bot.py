import logging
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from dotenv import load_dotenv
import google.generativeai as genai
from datetime import datetime

# Load environment variables
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Questionnaire configuration
QUESTIONS = [
    {
        "text": "–ö–æ–≥–¥–∞ –í–∞—à —Å—Ç–∞—Ä—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä 20.06.2025)",
        "type": "input",
        "validate": lambda x: validate_date(x)
    },
    {
        "text": "–ö–∞–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è?",
        "options": ["800‚Äì3000 –º", "3‚Äì10 –∫–º", "21 –∫–º", "42 –∫–º"]
    },
    {
        "text": "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
        "options": ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–û–ø—ã—Ç–Ω—ã–π"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –±–µ–≥–∞—Ç—å?",
        "options": ["1", "3", "5", "7"]
    },
    {
        "text": "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
        "options": ["–õ–µ—Å", "–ü–∞—Ä–∫", "–°—Ç–∞–¥–∏–æ–Ω", "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        "options": ["–¥–æ 45 –º–∏–Ω", "45‚Äì60 –º–∏–Ω", "60‚Äì90 –º–∏–Ω"]
    },
    {
        "text": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã?",
        "options": ["–ù–µ—Ç", "–ë–æ–ª—è—Ç –∫–æ–ª–µ–Ω–∏", "–ë–æ–ª–∏—Ç –Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü–∞", "–î—Ä—É–≥–æ–µ"]
    },
    {
        "text": "–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–±–µ–≥–∞–ª–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        "type": "input",
        "validate": lambda x: x.isdigit() and 0 < int(x) <= 100
    },
    {
        "text": "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–∞–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ?",
        "type": "multi_input",
        "options": ["–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"]
    }
]

# Conversation states
QUESTION, CLARIFICATION = range(2)
user_data = {}

def validate_date(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def generate_prompt(answers):
    try:
        start_date = datetime.strptime(answers.get(QUESTIONS[0]["text"], "01.01.1900"), "%d.%m.%Y")
        days_left = (start_date - datetime.now()).days
    except (ValueError, TypeError):
        days_left = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã)"

    prompt = f"""–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∑–∞–±–µ–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
    
–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {answers.get(QUESTIONS[2]["text"], "")}
–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {answers.get(QUESTIONS[1]["text"], "")}
–î–æ —Å—Ç–∞—Ä—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π
–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {answers.get(QUESTIONS[5]["text"], "")}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {answers.get(QUESTIONS[3]["text"], "")}
–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {answers.get(QUESTIONS[4]["text"], "")}
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ: {answers.get(QUESTIONS[7]["text"], "")} –∫–º
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é: {answers.get(QUESTIONS[6]["text"], "")}
–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö: {answers.get(QUESTIONS[8]["text"], "")}

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
2. –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ, —Ç–µ–º–ø–æ–≤—ã–µ, –¥–ª–∏–Ω–Ω—ã–µ –∏ —Ç.–¥.)
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
4. –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ
6. –ü–ª–∞–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º

–û—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."""
    
    return prompt

def generate_training_program(answers):
    try:
        prompt = generate_prompt(answers)
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        
        if not response.text:
            raise ValueError("Empty response from model")
            
        return response.text
    except Exception as e:
        logger.error(f"Error generating training program: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {}
    context.user_data.clear()
    
    await update.message.reply_text(
        "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–±–µ–≥—É.\n"
        "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∏–∑ 9 –≤–æ–ø—Ä–æ—Å–æ–≤ - —ç—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await ask_question(update, context)
    return QUESTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_index = context.user_data.get("current_index", -1) + 1
    
    if current_index >= len(QUESTIONS):
        return await finish_questionnaire(update, context)

    question = QUESTIONS[current_index]
    context.user_data["current_index"] = current_index
    context.user_data["current_question"] = question
    
    reply_markup = None
    if "options" in question:
        buttons = [[KeyboardButton(option)] for option in question["options"]]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(QUESTIONS)}:\n{question['text']}",
        reply_markup=reply_markup
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip()
    current_question = context.user_data["current_question"]

    if context.user_data.get("awaiting_clarification"):
        if not answer:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:")
            return CLARIFICATION
            
        user_data[user_id][current_question["text"]] = f"–î—Ä—É–≥–æ–µ: {answer}"
        context.user_data["awaiting_clarification"] = False
        await ask_question(update, context)
        return QUESTION

    if "options" in current_question and answer not in current_question["options"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return QUESTION

    if current_question.get("type") == "input":
        if "validate" in current_question and not current_question["validate"](answer):
            error_msg = {
                QUESTIONS[0]["text"]: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                QUESTIONS[7]["text"]: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100"
            }.get(current_question["text"], "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            await update.message.reply_text(error_msg)
            return QUESTION

    if answer == "–î—Ä—É–≥–æ–µ" and "options" in current_question:
        context.user_data["awaiting_clarification"] = True
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:")
        return CLARIFICATION

    user_data[user_id][current_question["text"]] = answer
    await ask_question(update, context)
    return QUESTION

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        program = generate_training_program(user_data[user_id])
        chunks = [program[i:i+4000] for i in range(0, len(program), 4000)]
        
        for chunk in chunks:
            await update.message.reply_text(
                chunk,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
        await update.message.reply_text(
            "üèÅ –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –î–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–∂–º–∏ /start\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫."
        )
    except Exception as e:
        logger.error(f"Error sending program: {e}")
        await update.message.reply_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
        
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω–æ. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    application = ApplicationBuilder() \
        .token(os.getenv("TELEGRAM_TOKEN")) \
        .build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            CLARIFICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("cancel", cancel))
    
    logger.info("Bot starting...")
    application.run_polling()

if __name__ == '__main__':
    main()
