import logging
import os
import sys
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

try:
    from dotenv import load_dotenv
except ImportError:
    print("[ERROR] –£—Å—Ç–∞–Ω–æ–≤–∏ dotenv: pip install python-dotenv")
    sys.exit(1)

try:
    import google.generativeai as genai
except ImportError:
    print("[ERROR] –£—Å—Ç–∞–Ω–æ–≤–∏ Gemini SDK: pip install google-generativeai")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not GEMINI_API_KEY or not TELEGRAM_TOKEN:
    print("[ERROR] –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GEMINI_API_KEY –∏ TELEGRAM_TOKEN")
    sys.exit(1)

genai.configure(api_key=GEMINI_API_KEY)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
QUESTIONS = [
    {"text": "–ö–æ–≥–¥–∞ –í–∞—à —Å—Ç–∞—Ä—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä 20.06.2025)", "type": "input"},
    {"text": "–ö–∞–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è?", "options": ["800‚Äì3000 –º", "3‚Äì10 –∫–º", "21 –∫–º", "42 –∫–º"]},
    {"text": "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?", "options": ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–û–ø—ã—Ç–Ω—ã–π"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –±–µ–≥–∞—Ç—å?", "options": ["1", "3", "5", "7"]},
    {"text": "–ì–¥–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?", "options": ["–õ–µ—Å", "–ü–∞—Ä–∫", "–°—Ç–∞–¥–∏–æ–Ω", "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", "options": ["–¥–æ 45 –º–∏–Ω", "45‚Äì60 –º–∏–Ω", "60‚Äì90 –º–∏–Ω"]},
    {"text": "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã?", "options": ["–ë–æ–ª—è—Ç –∫–æ–ª–µ–Ω–∏", "–ë–æ–ª–∏—Ç –Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü–∞", "–î—Ä—É–≥–æ–µ"]},
    {"text": "–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–±–µ–≥–∞–ª–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", "type": "input"},
    {"text": "–í –∫–∞–∫–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞? (–∏–ª–∏ '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª')", "type": "multi_input"}
]

QUESTION, CLARIFICATION = range(2)
user_data = {}

def generate_prompt(answers):
    parts = [f"{q['text']} {answers.get(q['text'], '')}" for q in QUESTIONS]
    return "–°–æ—Å—Ç–∞–≤—å –±–µ–≥–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n" + "\n".join(parts)

def generate_training_program(answers):
    prompt = generate_prompt(answers)
    try:
        model = genai.GenerativeModel("models/gemini-2.0-flash")
        response = model.generate_content(prompt)
        return response.text if hasattr(response, "text") else str(response)
    except Exception as e:
        logger.error(f"[Gemini Error] {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {}
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∞–Ω–∫–µ—Ç—É üí¨", reply_markup=ReplyKeyboardRemove())
    await ask_question(update, context)
    return QUESTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_index = context.user_data.get("current_index", -1) + 1
    if current_index >= len(QUESTIONS):
        return await finish_questionnaire(update, context)

    question = QUESTIONS[current_index]
    context.user_data["current_index"] = current_index
    context.user_data["current_question"] = question

    reply_markup = None
    if "options" in question:
        buttons = [[KeyboardButton(option)] for option in question["options"]]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(question["text"], reply_markup=reply_markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text
    question = context.user_data.get("current_question")

    if context.user_data.get("awaiting_clarification"):
        user_data[user_id][question["text"]] = f"–î—Ä—É–≥–æ–µ: {answer}"
        context.user_data["awaiting_clarification"] = False
        return await ask_question(update, context)

    if "options" in question and answer not in question["options"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return QUESTION

    if answer == "–î—Ä—É–≥–æ–µ" and "options" in question:
        context.user_data["awaiting_clarification"] = True
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:")
        return CLARIFICATION

    user_data[user_id][question["text"]] = answer
    return await ask_question(update, context)

async def finish_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answers = user_data.get(user_id, {})
    if not answers:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

    program = generate_training_program(answers)
    await update.message.reply_text(program, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    await update.message.reply_text("üèÅ –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ /start")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data.pop(user_id, None)
    await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            CLARIFICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
